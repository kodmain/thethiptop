info:
  contact: {}
paths:
  /fizzbuzz/:int1/:int2/:limit/:str1/:str2:
    get:
      consumes:
      - '*/*'
      description: Executes the FizzBuzz algorithm based on the provided parameters.
      operationId: metrics.Counter => fizzbuzz.FizzBuzz
      parameters:
      - description: First integer to replace with str1
        in: path
        name: int1
        required: true
        type: integer
      - description: Second integer to replace with str2
        in: path
        name: int2
        required: true
        type: integer
      - description: The upper limit for the FizzBuzz sequence
        in: path
        name: limit
        required: true
        type: integer
      - description: String to replace multiples of int1
        in: path
        name: str1
        required: true
        type: string
      - description: String to replace multiples of int2
        in: path
        name: str2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A list of strings representing the FizzBuzz sequence
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request - invalid input parameters
          schema:
            type: object
      summary: Run FizzBuzz
      tags:
      - FizzBuzz
  /metrics/statistics:
    get:
      consumes:
      - '*/*'
      description: Retrieves data for the most frequent request.
      operationId: metrics.Statistics
      produces:
      - text/plain
      responses:
        "200":
          description: Statistics of the most frequent request
          schema:
            type: string
        "404":
          description: No data available
          schema:
            type: string
      summary: Show request metrics.
      tags:
      - Metrics
  /status/healthcheck:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      operationId: metrics.Counter => status.HealthCheck
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Show the status of server.
      tags:
      - Status
  /status/ip:
    get:
      consumes:
      - '*/*'
      description: get the ip of user.
      operationId: metrics.Counter => status.IP
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Show the ip of user.
      tags:
      - Status
swagger: "2.0"
