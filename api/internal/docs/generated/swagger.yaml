definitions:
  entities.Caisse:
    properties:
      id:
        description: Gorm model
        type: string
      storeID:
        description: Relations
        type: string
    type: object
host: localhost
info:
  contact: {}
  description: TheTipTop API
  title: TheTipTop
  version: dev
paths:
  /caisse:
    post:
      consumes:
      - multipart/form-data
      operationId: store.CreateCaisse
      parameters:
      - default: 440763b8-b8d9-4b36-9cc6-545a2c03071c
        description: Store ID
        format: uuid
        in: formData
        name: store_id
        required: true
        type: string
      produces:
      - application/jsons
      responses:
        "201":
          description: Caisse created
          schema:
            $ref: '#/definitions/entities.Caisse'
        "400":
          description: Invalid input
        "500":
          description: Internal server error
      summary: Create a new caisse
      tags:
      - Caisse
  /caisse/{id}:
    delete:
      operationId: store.DeleteCaisse
      parameters:
      - description: Client ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Caisse deleted
        "400":
          description: Invalid ID
        "404":
          description: Caisse not found
        "500":
          description: Internal server error
      summary: Delete a caisse by ID
      tags:
      - Caisse
    get:
      operationId: store.GetCaisse
      produces:
      - application/json
      responses:
        "200":
          description: List of caisse
          schema:
            $ref: '#/definitions/entities.Caisse'
        "500":
          description: Internal server error
      summary: Get all caisse
      tags:
      - Caisse
    put:
      consumes:
      - application/json
      operationId: store.UpdateCaisse
      parameters:
      - description: Client ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Caisse updated
          schema:
            $ref: '#/definitions/entities.Caisse'
        "400":
          description: Invalid input
        "404":
          description: Caisse not found
        "500":
          description: Internal server error
      summary: Update a caisse by ID
      tags:
      - Caisse
  /caisse/{lieu}:
    get:
      operationId: store.GetCaisseByStore
      parameters:
      - description: Store ID
        format: uuid
        in: path
        name: store_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of caisse
          schema:
            items:
              $ref: '#/definitions/entities.Caisse'
            type: array
        "400":
          description: Invalid lieu
        "500":
          description: Internal server error
      summary: Get caisse by lieu
      tags:
      - Caisse
  /client:
    put:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => user.UpdateClient
      parameters:
      - description: Client ID
        format: uuid
        in: formData
        name: id
        required: true
        type: string
      - default: false
        description: Newsletter
        in: formData
        name: newsletter
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "204":
          description: Password updated
        "400":
          description: Invalid email, password or token
        "404":
          description: Client not found
        "409":
          description: Client already validated
        "410":
          description: Token expired
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Update a client.
      tags:
      - Client
  /client/{id}:
    delete:
      operationId: jwt.Auth => user.DeleteClient
      parameters:
      - description: Client ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Client deleted
        "400":
          description: Invalid client ID
        "404":
          description: Client not found
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Delete a client by ID.
      tags:
      - Client
    get:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => user.GetClient
      parameters:
      - description: Client ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Client details
        "400":
          description: Invalid client ID
        "404":
          description: Client not found
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Get a client by ID.
      tags:
      - Client
  /client/register:
    post:
      consumes:
      - multipart/form-data
      operationId: user.RegisterClient
      parameters:
      - default: user-thetiptop@yopmail.com
        description: Email address
        format: email
        in: formData
        name: email
        required: true
        type: string
      - default: Aa1@azetyuiop
        description: Password
        in: formData
        name: password
        required: true
        type: string
      - default: true
        description: CGU
        in: formData
        name: cgu
        required: true
        type: boolean
      - default: false
        description: Newsletter
        in: formData
        name: newsletter
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Client created
        "400":
          description: Invalid email or password
        "409":
          description: Client already exists
        "500":
          description: Internal server error
      summary: Register a client.
      tags:
      - Client
  /code/error:
    get:
      consumes:
      - multipart/form-data
      operationId: code.ListErrors
      produces:
      - application/json
      responses: {}
      summary: List all code errors.
      tags:
      - Error
  /employee:
    put:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => user.UpdateEmployee
      parameters:
      - description: Employee ID
        format: uuid
        in: formData
        name: id
        required: true
        type: string
      - default: false
        description: Newsletter
        in: formData
        name: newsletter
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "204":
          description: Password updated
        "400":
          description: Invalid email, password or token
        "404":
          description: Employee not found
        "409":
          description: Employee already validated
        "410":
          description: Token expired
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Update a employee.
      tags:
      - Employee
  /employee/{id}:
    delete:
      operationId: jwt.Auth => user.DeleteEmployee
      parameters:
      - description: Employee ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Employee deleted
        "400":
          description: Invalid employee ID
        "404":
          description: Employee not found
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Delete a client by ID.
      tags:
      - Employee
    get:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => user.GetEmployee
      parameters:
      - description: Employee ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Employee details
        "400":
          description: Invalid employee ID
        "404":
          description: Employee not found
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Get a employee by ID.
      tags:
      - Employee
  /employee/register:
    post:
      consumes:
      - multipart/form-data
      operationId: user.RegisterEmployee
      parameters:
      - default: user-thetiptop@yopmail.com
        description: Email address
        format: email
        in: formData
        name: email
        required: true
        type: string
      - default: Aa1@azetyuiop
        description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Employee created
        "400":
          description: Invalid email or password
        "409":
          description: Employee already exists
        "500":
          description: Internal server error
      summary: Register a employee.
      tags:
      - Employee
  /export/client:
    get:
      operationId: jwt.Auth => user.ExportClient
      produces:
      - application/json
      responses:
        "200":
          description: Client exported
        "401":
          description: Unauthorized
        "404":
          description: Client not found
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Export all data of the connected client.
      tags:
      - Client
  /game/random:
    get:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => game.GetTicket
      produces:
      - application/json
      responses:
        "200":
          description: Ticket details
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - Bearer: []
      summary: Get a random ticket.
      tags:
      - Game
  /game/ticket:
    put:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => game.UpdateTicket
      parameters:
      - description: Ticket ID
        format: uuid
        in: formData
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ticket details
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - Bearer: []
      summary: Update a ticket.
      tags:
      - Game
  /game/ticket/{id}:
    get:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => game.GetTicketById
      produces:
      - application/json
      responses:
        "200":
          description: Tickets details
        "400":
          description: Bad request
        "404":
          description: Not found
      security:
      - Bearer: []
      summary: Get ticket by id.
      tags:
      - Game
  /game/tickets:
    get:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => game.GetTickets
      produces:
      - application/json
      responses:
        "200":
          description: Tickets details
        "400":
          description: Bad request
        "404":
          description: Not found
      security:
      - Bearer: []
      summary: List all tickets likend to the authenticated user.
      tags:
      - Game
  /status/healthcheck:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      operationId: status.HealthCheck
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Show the status of server.
      tags:
      - Status
  /status/ip:
    get:
      consumes:
      - '*/*'
      description: get the ip of user.
      operationId: status.IP
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Show the ip of user.
      tags:
      - Status
  /store:
    get:
      consumes:
      - multipart/form-data
      operationId: store.List
      produces:
      - application/json
      responses:
        "200":
          description: list of store
      summary: List all store.
      tags:
      - Store
  /user/auth:
    post:
      consumes:
      - multipart/form-data
      operationId: user.UserAuth
      parameters:
      - default: user-thetiptop@yopmail.com
        description: Email address
        format: email
        in: formData
        name: email
        required: true
        type: string
      - default: Aa1@azetyuiop
        description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Client signed in
        "400":
          description: Invalid email or password
        "500":
          description: Internal server error
      summary: Authenticate a client/employees.
      tags:
      - User
  /user/auth/renew:
    get:
      consumes:
      - '*/*'
      - multipart/form-data
      operationId: user.UserAuthRenew
      parameters:
      - description: With the bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: JWT token renewed
        "400":
          description: Invalid token
        "401":
          description: Token expired
        "500":
          description: Internal server error
      summary: Renew JWT for a client/employees.
      tags:
      - User
  /user/password:
    put:
      consumes:
      - multipart/form-data
      operationId: jwt.Auth => user.CredentialUpdate
      parameters:
      - default: user-thetiptop@yopmail.com
        description: Email address
        format: email
        in: formData
        name: email
        required: true
        type: string
      - default: Aa1@azetyuiop
        description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Token
        in: formData
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Password updated
        "400":
          description: Invalid email, password or token
        "404":
          description: Client not found
        "409":
          description: Client already validated
        "410":
          description: Token expired
        "500":
          description: Internal server error
      security:
      - Bearer: []
      summary: Update a client/employees password.
      tags:
      - User
  /user/register/validation:
    put:
      consumes:
      - multipart/form-data
      operationId: user.MailValidation
      parameters:
      - description: Token
        in: formData
        name: token
        required: true
        type: string
      - default: user-thetiptop@yopmail.com
        description: Email address
        format: email
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Client email validate
        "400":
          description: Invalid email or token
        "404":
          description: Client not found
        "409":
          description: Client already validated
        "410":
          description: Token expired
        "500":
          description: Internal server error
      summary: Validate a client/employees email.
      tags:
      - User
  /user/validation/renew:
    post:
      consumes:
      - multipart/form-data
      operationId: user.ValidationRecover
      parameters:
      - default: user-thetiptop@yopmail.com
        description: Email address
        format: email
        in: formData
        name: email
        required: true
        type: string
      - description: Type of validation
        enum:
        - mail
        - password
        - phone
        in: formData
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Recover a client/employees validation type.
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
