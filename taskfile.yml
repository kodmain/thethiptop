version: '3'

silent: true

dotenv: [ 'deploy/aws/token.env' ]

tasks:
  ## Common
  default:
    cmds:
      - task -l

  login:aws:
    desc: Se connecter à AWS SSO
    cmds:
      - aws --profile=kodmain s3 ls > /dev/null 2>&1 && { echo "Déjà connecté à AWS SSO."; } || { echo "Connexion à AWS SSO requise."; aws sso login --profile=kodmain; }

  update:
    desc: Update the dependencies
    cmds:
      - task api:update
      - task app:update

  build:
    desc: Build the app and the api
    cmds:
      - task api:build
      - task app:build

  tests:
    desc: Run the tests
    cmds:
      - task app:tests
      - task api:tests

  ## APP
  app:update:
    dir: app
    desc: Update the dependencies for the app
    cmds:
      - flutter pub upgrade

  app:tests:
    dir: app
    desc: Run the tests for the app
    cmds:
      - flutter test -r github --coverage --coverage-path {{.TASKFILE_DIR}}/flutter.lcov

  app:build:
    dir: app
    desc: Build the app
    cmds:
      - |
        rm -rf {{.TASKFILE_DIR}}/.build/app || true
        flutter build web -d {{.TASKFILE_DIR}}/.build/app --release --web-renderer canvaskit
        mv build {{.TASKFILE_DIR}}/.build/app
  
  app:arch:rebuild:
    dir: deploy/aws/app
    desc: rebuild the app
    cmds:
      - task app:arch:destroy
      - task app:arch:deploy

  app:arch:deploy:
    dir: deploy/aws/app
    deps: [ login:aws ]
    desc: deploy the app 
    cmds:
      - terraform init -upgrade
      - terraform apply -auto-approve
  
  app:arch:destroy:
    dir: deploy/aws/app
    deps: [ login:aws ]
    desc: destroy the app 
    cmds:
      - terraform init -upgrade
      - terraform apply -auto-approve -destroy

  app:run:
    dir: app
    desc: Run the app
    cmds:
      - flutter run -d chrome

  ## API 
  api:update:
    dir: api
    desc: Update the dependencies for the api
    cmds:
      - go get -u {{.TASKFILE_DIR}}/...
      - go mod vendor
      - go mod tidy

  api:tests:
    dir: api
    desc: Run the tests for the api
    cmds:
      - gotestsum -f github-actions -- -v $(go list ./... | grep -vE "vendor") -coverprofile={{.TASKFILE_DIR}}/api.out -covermode=atomic

  api:build:
    dir: api
    desc: Build the api
    cmds:
      - | 
        go generate ./... 
        swag init -g cmd/main.go -o ./internal/docs/generated
        rm -rf {{.TASKFILE_DIR}}/.build/api || true
        ldflags="-s -w -X github.com/kodmain/thetoptop/api/config.BUILD_COMMIT=$(git rev-parse --short HEAD)"
        CGO_ENABLED=1 GOOS=linux go build -trimpath -buildvcs=false -tags netgo -ldflags="$ldflags" -o {{.TASKFILE_DIR}}/.build/api/thetiptop cmd/main.go

  api:run:
    dir: api
    desc: Build the api
    cmds:
      - | 
        go generate ./... 
        swag init -g cmd/main.go -o ./internal/docs/generated
        go run cmd/main.go

  api:arch:rebuild:
    dir: deploy/aws/api
    desc: rebuild the app
    cmds:
      - task api:arch:destroy
      - task api:arch:deploy

  api:arch:deploy:
    dir: deploy/aws/api
    deps: [ login:aws ]
    desc: deploy the app
    cmds:
      - terraform init -var="github_token=$GH_TOKEN" -upgrade
      - terraform apply -auto-approve -var="github_token=$GH_TOKEN"

  api:arch:destroy:
    dir: deploy/aws/api
    deps: [ login:aws ]
    desc: destroy the app
    cmds:
      - terraform init -var="github_token=$GH_TOKEN" -upgrade
      - terraform apply -auto-approve -destroy -var="github_token=$GH_TOKEN"
