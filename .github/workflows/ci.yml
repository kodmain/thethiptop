name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'

permissions:
  pull-requests: read
  contents: read
  packages: write

jobs:
  Tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v2
        with:
          channel: stable
          version: 3.19.3

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup dependencies
        run: go install gotest.tools/gotestsum@latest

      - name: Run all the tests and code checks
        run: task tests

      - name: Upload project to Artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: project
          path: .

  Analyze:
    name: Analyze
    needs: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: GitGuardian
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base_ref }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  Binaries:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build binaries for ${{ matrix.arch }}
    needs: [Tests, Analyze]
    outputs:
      version: ${{ steps.semver.outputs.next }}
      prev_version: ${{ steps.semver.outputs.current }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: write
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Get Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
          skipInvalidTags: true
          noNewCommitBehavior: 'current'
  
      - name: Build
        run: |
          ldflags="-s -w -X github.com/kodmain/thetiptop/api/config.BUILD_VERSION=${{ steps.semver.outputs.next }} -X github.com/kodmain/thetiptop/api/config/config.BUILD_COMMIT=$(git rev-parse --short HEAD)"
          GOOS=linux GOARCH=${{ matrix.arch }} go build -trimpath -buildvcs=false -ldflags="$ldflags" -o .build/api/thetiptop-${{ matrix.arch }} api/cmd/main.go
        env:
          VERSION: ${{ steps.semver.outputs.next }}
          GWD: ${{ github.workspace }}

      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          name: TheTipTop ${{ steps.semver.outputs.next }}
          makeLatest: true
          tag: ${{ steps.semver.outputs.next }}
          artifacts: ".build/api/*"
          allowUpdates: true
          skipIfReleaseExists: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

  Docker:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: Binaries
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Extract repository name
        id: repo_name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          file: .github/dockerfiles/remote.Dockerfile
          context: .
          platforms: linux/arm64, linux/amd64
          push: true
          provenance: false
          build-args: |
            BINARY_VERSION=${{ needs.binaries.outputs.version }}
            BINARY_OS=linux
            PROJECT_NAME=${{ steps.repo_name.outputs.REPO_NAME }}
            REPOSITORY_NAME=${{ github.repository }}
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ needs.binaries.outputs.version }}

      - name: Authenticate to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check vulnerabilities
        uses: docker/scout-action@v1
        with:
          dockerhub-user: ${{secrets.DOCKERHUB_USERNAME}}
          dockerhub-password: ${{secrets.DOCKERHUB_TOKEN}}
          command: cves,compare
          organization: ${{ github.repository_owner }}
          image: ghcr.io/${{ github.repository }}:${{ needs.binaries.outputs.version }}
          to: ghcr.io/${{ github.repository }}:${{ needs.binaries.outputs.prev_version }}
          ignore-base: true
          ignore-unchanged: true
          only-fixed: true
          summary: true
          write-comment: true