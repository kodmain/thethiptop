name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'

permissions:
  pull-requests: read
  contents: read
  packages: write

jobs:
  Tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
          cache-dependency-path: api/go.sum

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v2
        with:
          channel: stable
          version: 3.19.5

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup dependencies
        run: go install gotest.tools/gotestsum@latest

      - name: Setup Flutter dependencies
        working-directory: ./app
        run: flutter pub get

      - name: Run all the tests and code checks
        run: task tests

      - name: Upload project to Artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: project
          path: .


  Analyze:
    name: Analyze
    needs: Tests
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .
      
      - name: GitGuardian
        uses: GitGuardian/ggshield/actions/secret@v1.26.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base_ref }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v2
        with:
          channel: stable
          version: 3.19.3

      - name: SonarScanner Setup
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
          echo "sonar.host.url=$SONAR_HOST_URL" > /opt/sonar-scanner/conf/sonar-scanner.properties
          echo "sonar.login=$SONAR_TOKEN" >> /opt/sonar-scanner/conf/sonar-scanner.properties
          echo "sonar.sourceEncoding=UTF-8" >> /opt/sonar-scanner/conf/sonar-scanner.properties

      - name: SonarScanner Analyze
        run: sonar-scanner -X -Dsonar.qualitygate.wait=true -Dsonar.verbose=true

      - name: SonarQube Comment
        if: always()
        uses: ibex-code/sonarqube-pull-request-comment@master
        with:
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          sonar_host_url: ${{ secrets.SONAR_HOST_URL }}
          github_token: aaaa


  
  Binaries:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build binaries for ${{ matrix.arch }}
    needs: [Tests, Analyze]
    outputs:
      version: ${{ steps.semver.outputs.next }}
      prev_version: ${{ steps.semver.outputs.current }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: write
    steps:
      - name: Install build dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y --no-install-recommends build-essential musl-dev

      - name: What is next version?
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
          skipInvalidTags: true
          noNewCommitBehavior: 'current'
  
  Build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: Analyze
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Build Image
        uses: docker/build-push-action@v5
        with:
          file: .github/dockerfiles/remote.Dockerfile
          context: .
          push: true
          platforms: linux/arm64, linux/amd64
          build-args: |
            BINARY_VERSION=${{ needs.Analyze.outputs.version }}
          tags: ghcr.io/${{ github.repository }}:PREVIEW

      - name: Extract release from build
        run: task extract "IMAGE_TAG=ghcr.io/${{ github.repository }}:PREVIEW" 

      - name: Upload project to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artefacts
          path: .

      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          name: TheTipTop ${{ needs.Analyze.outputs.version }}
          makeLatest: true
          tag: ${{ needs.Analyze.outputs.version }}
          artifacts: ".build/api/*"
          allowUpdates: true
          skipIfReleaseExists: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ needs.Analyze.outputs.version }}

      - name: Authenticate to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Check vulnerabilities
        uses: docker/scout-action@v1
        with:
          dockerhub-user: ${{secrets.DOCKERHUB_USERNAME}}
          dockerhub-password: ${{secrets.DOCKERHUB_TOKEN}}
          command: cves
          organization: ${{ github.repository_owner }}
          image: ghcr.io/${{ github.repository }}:${{ needs.Analyze.outputs.version }}
          ignore-base: true
          ignore-unchanged: true
          only-fixed: true
          summary: true
          write-comment: true
