name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'

permissions:
  pull-requests: read
  contents: read

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x

      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
            ~/go.sum
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run all the tests and code checks
        run: make test units

      - name: Upload project to Artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: project
          path: .

  sonarcloud:
    name: SonarCloud
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=kodmain_thetiptop
            -Dsonar.organization=kodmain
            -Dsonar.go.coverage.reportPaths=coverage.out
  
  binaries:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build binaries
    needs: test
    outputs:
      version: ${{ steps.semver.outputs.next }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: write
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Get next version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
          skipInvalidTags: true
  
      - name: Build binaries for each OS and ARCH
        run: |
          ldflags="-s -w -X github.com/kodmain/thetiptop/project/config/config.BUILD_VERSION=${{ steps.semver.outputs.next }} -X github.com/kodmain/thetiptop/project/config/config.BUILD_COMMIT=$(git rev-parse --short HEAD)"
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build -trimpath -buildvcs=false -ldflags="$ldflags" -o .build/bin/thetiptop-linux-${{ matrix.arch }} project/cmd/main.go
        env:
          VERSION: ${{ steps.semver.outputs.next }}
          GWD: ${{ github.workspace }}
  
      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          name: TheTipTop ${{ steps.semver.outputs.next }}
          makeLatest: true
          tag: ${{ steps.semver.outputs.next }}
          artifacts: ".build/bin/*"
          allowUpdates: true
          skipIfReleaseExists: false
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: binaries
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Download project from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          file: deploy/Dockerfile
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          build-args: |
            BINARY_VERSION=${{ needs.binaries.outputs.version }}
            BINARY_OS=linux
            BINARY_ARCH=${{ matrix.arch }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.binaries.outputs.version }}
          
